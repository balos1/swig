//---------------------------------*-SWIG-*----------------------------------//
/*!
 * \file   fortran/fortran.swg
 * \author Seth R Johnson
 * \date   Sat Dec 03 09:10:31 2016
 * \brief  Fortran typemap code
 * \note   Copyright (c) 2016 Oak Ridge National Laboratory, UT-Battelle, LLC.
 */
//---------------------------------------------------------------------------//

//---------------------------------------------------------------------------//
/*! LANGUAGE EXTENSIONS.
   %fortranbegin : Insertion directive to add wrapper code at the very top of
   the Fortran proxy file.

     Example:
         %fortranbegin %{
         ! Auto-generated by SWIG
         ! Requires foo and bar
         %}

   %proxycode : Insert Fortran code directly into the `contains` portion of a
     module. Note that to make the code accessible you will have to add it to the
     type declartion if appropriate (using `%insert("ftypes")`) or declare it
     as a public module subroutine (using `%insert("fpublic")`).

   %fortranprepend : Add code at the beginning of a proxy function
   %fortranappend  : Add code at the end of a proxy function

   %parameter : Force a global constant to be treated as a compile-time value
           (value MUST be interpretable by Fortran)
   %enumerator : Force an enum to be treated as a compile-time Fortran enum
           (enum values MUST be interpretable by Fortran)
   %bindc : Generate *interfaces only*, no wrapper code, for a function
 */
#define %fortranbegin         %insert("fbegin")
#define %proxycode            %insert("fwrapper")

#define %fortranprepend       %feature("fortran:prepend")
#define %clearfortranprepend  %feature("fortran:prepend","")

#define %fortranappend        %feature("fortran:append")
#define %clearfortranappend   %feature("fortran:append","")


#define %parameter      %feature("fortran:parameter")
#define %noparameter    %feature("fortran:parameter","0")
#define %clearparameter %feature("fortran:parameter","")

#define %enumerator      %feature("fortran:enumerator")
#define %noenumerator    %feature("fortran:enumerator","0")
#define %clearenumerator %feature("fortran:enumerator","")

#define %bindc      %feature("fortran:bindc")
#define %nobindc    %feature("fortran:bindc", "0")
#define %clearbindc %feature("fortran:bindc", "")

//---------------------------------------------------------------------------//
// STANDARD TYPE DEFINITIONS

#ifdef __cplusplus
namespace std
{
#endif
typedef unsigned long size_t;
typedef long ptrdiff_t;
#ifdef __cplusplus
}
using std::size_t;
using std::ptrdiff_t;
#endif

//---------------------------------------------------------------------------//
// RUNTIME
%include "forruntime.swg"

//---------------------------------------------------------------------------//
// FRAGMENTS
%include "forfragments.swg"

//---------------------------------------------------------------------------//
// CUSTOM TYPEMAP DESCRIPTIONS.
%include "fortypemaps.swg"

//---------------------------------------------------------------------------//
// RESERVED KEYWORDS
%include "forkw.swg"

//---------------------------------------------------------------------------//
// end of fortran/fortran.swg
//---------------------------------------------------------------------------//
